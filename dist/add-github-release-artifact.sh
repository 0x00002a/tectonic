#! /bin/bash
# Copyright 2019 the Tectonic Project
# Licensed under the MIT License.

# Upload one or more files to be artifacts associated with the named release
# on GitHub. If the named release does not already exist, it is created.
#
# Arguments:
#
# -t RELEASE-TITLE -- use this as the release title; defaults to the release tag name
# -p               -- mark the release as a prerelease
# -d DESCRIPTION   -- use DESCRIPTION as the release description; defaults to
#                     brief text describing the origin commit
# $1               -- the release tag name
# $2...            -- paths to artifacts (files) to attach to the release
#
# Environment variables:
#
# $GITHUB_TOKEN -- the API token for talking to GitHub
# $TRAVIS_REPO_SLUG -- the "repo slug" (e.g. "tectonic-typesetting/tectonic") we're building

set -o pipefail
set -e

is_prerelease=false

while getopts ":d:pt:" opt; do
    case $opt in
        d)
            description="$OPTARG" ;;
        p)
            is_prerelease=true ;;
        t)
            release_title="$OPTARG" ;;
        \?)
            echo >&2 "error: unexpected option -$OPTARG"
            exit 1 ;;
        :)
            echo >&2 "error: -$OPTARG requires an argument"
            exit 1 ;;
    esac
done

shift $((OPTIND - 1))

release_tag="$1"
shift

if [ -z "$release_tag" ] ; then
    echo >&2 "error: no release tag name specified"
    exit 1
fi

if [ -z "$release_title" ] ; then
    release_title="$release_tag"
fi

if [ -z "$1" ] ; then
    echo >&2 "error: must specify at least file to upload"
    exit 1
fi

# OK. Arguments done. Environment variables?

if [ -z "$GITHUB_TOKEN" ] ; then
    echo >&2 "error: no GITHUB_TOKEN environment variable"
    exit 1
fi

curl=(
    curl
    -s
    --header "Authorization: token ${GITHUB_TOKEN}"
)

if [ -z "$TRAVIS_REPO_SLUG" ] ; then
    echo >&2 "error: no TRAVIS_REPO_SLUG environment variable"
    exit 1
fi

api_base_url="https://api.github.com/repos/$TRAVIS_REPO_SLUG"

echo "info: adding artifacts to release $TRAVIS_REPO_SLUG:$release_tag"

if [ -z "$description" ] ; then
    description="Autogenerated release."
fi

if ! type jql >/dev/null 2>&1 ; then
    echo "info: installing jql"
    cargo install -q --force jql
fi

# Finally ready to actually do something. Get the upload URL if the release
# exists.

upload_url=$(
    "${curl[@]}" -XGET "$api_base_url/releases/tags/$release_tag" | \
        jql '"upload_url"' | \
        sed -e 's|"||g' -e 's|{.*||'
)

# If that didn't work we assume that we need to create the release. There's a
# race condition here, but I don't know how to avoid it. We can't create it as
# a draft because the tag-based query above doesn't return information for
# draft releases.

if [ -z "$upload_url" ] ; then
    echo "info: creating release for tag $release_tag"
    release_json='{
  "tag_name": "'"$release_tag"'",
  "name": "'"$release_title"'",
  "body": "'"$description"'",
  "draft": false,
  "prerelease": '$is_prerelease'
}'

    upload_url=$(
    "${curl[@]}" --data "$release_json" "$api_base_url/releases" | \
        jql '"upload_url"' | \
        sed -e 's|"||g' -e 's|{.*||'
    )
fi

# Actually upload the files.

while [ $# -gt 0 ] ; do
    path="$1"
    shift

    url=$(
        "${curl[@]}" \
            --header "Accept: application/vnd.github.manifold-preview" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @"$path" \
            "$upload_url?name=$(basename "$path")" | \
        jql '"url"' | \
        sed -e 's|"||g'
    )
    echo "info: $path -> $url"
done
