# Copyright 2016-2020 the Tectonic Project
# Licensed under the MIT License.
#
# Main pipeline spec for CI/CD on Azure Pipelines.

parameters:
- name: linuxPkgconfigBuilds
  type: object
  default:
  - name: stable
    params:
      canaryBuild: false
      primaryRcBuild: false # XXXXXXXXXXXXX
    vars:
      TARGET: x86_64-unknown-linux-gnu
      TOOLCHAIN: stable
  - name: beta
    params:
      canaryBuild: true
      primaryRcBuild: false
    vars:
      TARGET: x86_64-unknown-linux-gnu
      TOOLCHAIN: beta

trigger:
  branches:
    include:
    - new-ci  # XXX TEMP
    - rc

stages:
- stage: BuildAndTest
  jobs:

  # Linux builds.
  # TODO: I think Linux/vcpkg is broken: https://github.com/mcgoo/vcpkg-rs/issues/21

  - ${{ each build in parameters.linuxPkgconfigBuilds }}:
    - job: ${{ format('Linux_pkgconfig_{0}', build.name) }}
      pool:
        vmImage: ubuntu-20.04
      steps:
      - template: azure-build-and-test-pkgconfig.yml
        parameters:
          ${{ insert }}: ${{ build.params }}
      variables:
        ${{ insert }}: ${{ build.vars }}

  # Mac builds
  - job: macOS_vcpkg
    pool:
      vmImage: macos-10.15
    steps:
    - template: azure-build-and-test-vcpkg.yml
    variables:
      TARGET: x86_64-apple-darwin
      TOOLCHAIN: stable

  - job: macOS_pkgconfig
    pool:
      vmImage: macos-10.15
    steps:
    - template: azure-build-and-test-pkgconfig.yml
      parameters:
        canaryBuild: true
    variables:
      TARGET: x86_64-apple-darwin
      TOOLCHAIN: stable

  # Windows builds
  - job: Windows_vcpkg
    pool:
      vmImage: windows-2019
    steps:
    - template: azure-build-and-test-vcpkg.yml
    variables:
      TARGET: x86_64-pc-windows-msvc
      TOOLCHAIN: stable-x86_64-pc-windows-msvc

  # todo: non-vcpkg windows-gnu
  #   TARGET: x86_64-pc-windows-gnu
  #   TOOLCHAIN: stable-x86_64-pc-windows-gnu

  # rustfmt check
  - job: rustfmt
    pool:
      vmImage: ubuntu-16.04
    steps:
      - bash: rustup component add rustfmt
        displayName: "Install rustfmt"
      - bash: cargo fmt --all -- --check
        displayName: "Check rustfmt (cargo)"
    variables:
      TOOLCHAIN: stable

  # clippy check
  - job: clippy
    pool:
      vmImage: ubuntu-16.04
    steps:
      - bash: rustup component add clippy
        displayName: "Install clippy"
      - bash: cargo fmt --all -- --check
        displayName: "Check clippy (cargo)"
    variables:
      TOOLCHAIN: stable


# If all of those succeed and we're not in a pull request, run the deployment
# pipeline. If we're specifically on the `rc` branch, this will finalize any
# releases.
- stage: Deploy
  condition: and(succeeded('BuildAndTest'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: Deploy
    environment: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-16.04

    variables:
    - group: Deployment Credentials

    strategy:
      runOnce:
        deploy:
          steps:
            - template: azure-deployment.yml
              parameters:
                rcBuild: ${{ eq(variables['Build.SourceBranchName'], 'rc') }}
