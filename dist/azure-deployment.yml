# Copyright 2016-2020 the Tectonic Project
# Licensed under the MIT License.
#
# Deployment pipeline, run when all CI tests pass on `master` or `rc`.
# Parameters:
#
# - `isMainDev`: this is an update to the main development branch; update
#   continuous-deployment release
# - `isRelease`: this is an update to the `rc` branch; run the Official Release
#   machinery

parameters:
- name: isMainDev
  type: boolean
  default: false
- name: isRelease
  type: boolean
  default: false

steps:

- checkout: self

- bash: |
    set -xeuo pipefail
    d="$(mktemp -d /tmp/cranko.XXXXXX)"
    cd "$d"
    curl --proto '=https' --tlsv1.2 -sSf https://pkgw.github.io/cranko/fetch-latest.sh | sh
    echo "##vso[task.prependpath]$d"
  displayName: Install latest Cranko

- bash: |
    set -xeuo pipefail
    git switch -c release
    git pull --ff-only $(Pipeline.Workspace)/git-release/release.bundle
    git show
  displayName: Restore release commit

# We determine a "toplevel" release mode that affects things like updates to the
# book. The $TOPLEVEL_MODE variabe has three settings:
#
# - "latest" if this is continuous deployment/delivery, i.e. a push to the
#   `master` branch. In this case we update things like the book under the
#   version code "latest"
# - "skip" if this is an RC update that does *not* update the main `tectonic`
#   project. In this case we do not update things.
# - Otherwise, the text of the variable is the version string of a new official
#   release of the `tectonic` project. Things like the book should be updated
#   with a real version number.
#
# The boolean parameters stringify to `True` or `False`
- bash: |
    set -xeuo pipefail
    if [[ ${isMainDev} == True ]] ; then
      version_text=latest
    elif cranko show if-released --exit-code tectonic ; then
      version_text="$(cranko show version tectonic)"
    else
      version_text=skip
    fi

    echo "toplevel version: $isMainDev, $isRelease => $version_text"

    # `set -x` messes up `setvariable` behavior:
    set +x
    echo "##vso[task.setvariable variable=TOPLEVEL_MODE;]$version_text"
  displayName: Set toplevel release mode
  env:
    isMainDev: ${{ parameters['isMainDev'] }}
    isRelease: ${{ parameters['isRelease'] }}

# Because we want to create GitHub releases for any Cranko project that gets
# released, we always need the GitHub credential helper to be set up, even when
# TOPLEVEL_MODE is "skip".
- bash: |
    set -xeuo pipefail
    git config --global user.email "notifications@github.com"
    git config --global user.name "Tectonic CI"
    cranko github install-credential-helper
  displayName: Set up GitHub push credentials
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)

# Things that only happen when the toplevel mode is not "skip":
- bash: |
    set -xeuo pipefail

    # Worth adding better Cranko support for this? reboot-branch is close
    dist/force-push-tree.sh \
      $(Pipeline.Workspace)/book \
      https://github.com/tectonic-typesetting/book.git \
      "$TOPLEVEL_MODE" \
      "docs mdbook"
  displayName: Update book HTML
  condition: and(succeeded(), ne(variables['TOPLEVEL_MODE'], 'skip'))
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)

# Things that only happen in main-dev mode:
- ${{ if parameters.isMainDev }}:
  - bash: |
      set -xeuo pipefail
      cranko github delete-release continuous
      git tag -f continuous HEAD
      git push -f --tags origin continuous
      cranko github create-custom-release \
        --name "Continuous Deployment" \
        --prerelease \
        --desc "Continuous deployment of commit $(git rev-parse --short HEAD)" \
        continuous
      cranko github upload-artifacts --by-tag continuous \
        $(Pipeline.Workspace)/binary-*/* \
        $(Pipeline.Workspace)/appimage/*
    displayName: Recreate continuous-deployment GitHub release
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

# Things that only happen in full-official-release mode:
- ${{ if parameters.isRelease }}:
  - bash: |
      set -xeuo pipefail
      cranko release-workflow tag
    displayName: Create release tags

  - bash: |
      set -xeuo pipefail
      git push --tags origin release:release
    displayName: Update release branch
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - bash: |
      set -xeuo pipefail
      cranko cargo foreach-released -- publish --no-verify
    displayName: Publish updated Cargo crates
    env:
      CARGO_REGISTRY_TOKEN: $(CARGO_REGISTRY_TOKEN)

  # The `if-released` check currently here could be folded in to an examination
  # of $TOPLEVEL_MODE, but maybe one day we'll have other projects with
  # associated artifacts, in which case I think the best approach will be to add
  # more logic analogous to what we've got now.
  - bash: |
      set -xeuo pipefail
      cranko github create-releases

      if cranko show if-released --exit-code tectonic; then
        cranko github upload-artifacts tectonic \
          $(Pipeline.Workspace)/binary-*/* \
          $(Pipeline.Workspace)/appimage/*
      fi
    displayName: Create per-project GitHub releases
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  # Things that only happen in full-official-release mode, plus a new release of
  # the toplevel project was made:
  - bash: |
      set -xeuo pipefail
      keypath=$(mktemp)
      echo "$ARCHLINUX_DEPLOY_KEY_BASE64" |base64 -d >"$keypath"
      bash dist/arch/deploy.sh "$keypath" "$(cranko show version tectonic)"
    displayName: Update ArchLinux package
    condition: and(succeeded(), ne(variables['TOPLEVEL_MODE'], 'skip'))
    env:
      ARCHLINUX_DEPLOY_KEY_BASE64: $(ARCHLINUX_DEPLOY_KEY_BASE64)
